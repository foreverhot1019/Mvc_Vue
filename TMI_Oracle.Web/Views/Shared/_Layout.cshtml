<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!--页面强制不读取缓存-->
    @*<meta http-equiv="pragma" content="no-cache">
        <meta http-equiv="cache-control" content="no-cache">
        <meta http-equiv="expires" content="0">*@
    @{
        System.Net.IPHostEntry OIPHost;
        string WebHostStr = "";
        int WebHostIndex = -1;
        string WebSiteName = "MVC网站";
        try
        {
            //加锁 防止 多人同时 登录时引发 Cache 对象已具有相同键值
            lock (TMI.Web.Extensions.Common.lockCacheNoQxValid)
            {
                if (HttpContext.Current.Cache == null || HttpContext.Current.Cache["WebHostStr"] == null)
                {
                    string hostname = System.Net.Dns.GetHostName();//得到本机名
                    System.Net.IPHostEntry localhost = System.Net.Dns.GetHostByName(hostname);//方法已过期，只得到IPv4的地址
                    //System.Net.IPHostEntry localhost = System.Net.Dns.GetHostEntry(hostname);//得到IPv4和IPv6的地址
                    //System.Net.IPAddress localaddr = localhost.AddressList[0];
                    HttpContext.Current.Cache["WebHostStr"] = localhost;
                }
                WebSiteName = System.Configuration.ConfigurationManager.AppSettings["WebSiteName"] ?? "MVC网站";
                ViewData["WebSiteName"] = WebSiteName;
            }
        }
        catch (Exception ex)
        {
        }

        OIPHost = HttpContext.Current.Cache["WebHostStr"] == null ? null : (System.Net.IPHostEntry)Cache["WebHostStr"];
        WebHostStr = OIPHost == null ? "" : (OIPHost.AddressList.Any() ? OIPHost.AddressList.Select(x => x.ToString()).OrderBy(x => x).FirstOrDefault() : "");
        WebHostIndex = WebHostStr.LastIndexOf('.');
    }
    <title>@Html.Raw((WebHostIndex > 0 ? WebHostStr.Substring(WebHostIndex + 1) + "-" : "") + ViewBag.Title) | @WebSiteName</title>
    @*<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700' rel='stylesheet' type='text/css'>*@
    <!-- Add local styles, mostly for plugins css file -->
    @if (IsSectionDefined("Styles"))
    {
        @RenderSection("Styles", required: false)
    }

    <!-- Add jQuery Style direct - used for jQGrid plugin -->
    @*<link href="@Url.Content("~/Scripts/plugins/jquery-ui/jquery-ui.css")" rel="stylesheet" type="text/css" />*@

    <!-- Primary Inspinia style -->
    @Styles.Render("~/Content/css")
    @Styles.Render("~/font-awesome/css")
    @Styles.Render("~/font-awesome3.2/css")
    @*@Styles.Render("~/plugins/dataPickerStyles")
        @Styles.Render("~/plugins/summernoteStyles")*@
    @Styles.Render("~/easyui/css")
    @Styles.Render("~/uploadifive/css")
    @*@Styles.Render("~/uploadify/css")*@
    <style>
        .has-error input, .has-error select, .has-error textarea {
            border: 1px solid #CE5454;
            box-shadow: 0 0 4px -2px #CE5454;
            position: relative;
            left: 0;
            -moz-animation: .7s 1 shake linear;
            -webkit-animation: 0.7s 1 shake linear;
        }
        /*.textbox {
            position: relative;
            border: 1px solid #ddd;
            background-color: #fff;
            vertical-align: middle;
            display: inline-block;
            overflow: hidden;
            white-space: nowrap;
            margin: 0;
            padding: 0;
            -moz-border-radius: 0px 0px 0px 0px;
            -webkit-border-radius: 0px 0px 0px 0px;
            border-radius: 0px 0px 0px 0px;
            display: block;
        }
        .textbox-addon {
            position: absolute;
            top: 0;
            display: block;
        }*/
        .form-group {
            margin-bottom: 3px;
        }

            .form-group label {
                display: inline-block;
                max-width: 100%;
                margin-bottom: 0px;
                font-weight: 700;
            }
    </style>
    <!-- Section for main scripts render -->
    @Scripts.Render("~/bundles/jquery")
    <script type="text/javascript" src="~/Scripts/moment-with-locales.js?date=2018013001"></script>
    <!--jQuery-Mask 面罩格式化-->
    <script src="~/Scripts/plugins/jQuery-Mask/jquery.mask.min.js"></script>
    @*@Scripts.Render("~/plugins/summernote")*@
    @*@Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/plugins/dataPicker")*@
    <!-- Skin config script - only for demo purpose-->
    @*@Scripts.Render("~/bundles/skinConfig")*@
    <!-- easyui script-->
    @Scripts.Render("~/easyui/js")
    <!-- uploadifive script-->
    @Scripts.Render("~/uploadifive/js")
    @*@Scripts.Render("~/uploadify/js")*@
    <!-- Skin configuration box -->
    @*@Html.Partial("_SkinConfig")*@
    <!-- cookie和url -->
    <script type="text/javascript" src="~/Scripts/jquery.cookie.js"></script>
    <script async defer type="text/javascript" src="~/Scripts/url.js"></script>
    <script type="text/javascript" src="~/Scripts/socket.io/2.0.4/socket.io.js"></script>
    <script>
        //设置datagrid默认展示行数
        function setdgDefaultPageSize(dg_id, pageSize) {
            try {
                var cookieKey = dg_id + "_PageSize";
                var PageSize = $.cookie(cookieKey);
                if (typeof PageSize === 'undefined' || PageSize == null || $.trim(PageSize) == '' || isNaN(PageSize)) {
                    $.cookie(cookieKey, pageSize);
                    localStorage.setItem(cookieKey, pageSize);
                } else {
                    if (pageSize != parseInt(PageSize)) {
                        $.cookie(cookieKey, pageSize);
                        localStorage.setItem(cookieKey, pageSize);
                    }
                }
            }catch(e){
                console.log('setdgDefaultPageSize',e);
            }
            return true;
        }
        //获取datagrid默认展示行数
        function getdgDefaultPageSize(dg_id) {
            try {
                var cookieKey = dg_id + "_PageSize";
                var PageSize = $.cookie(cookieKey);
                var valLocal = localStorage.getItem(cookieKey); // 读取存储变量名为key的值
                if (typeof PageSize === 'undefined' || PageSize == null || $.trim(PageSize) == '' || isNaN(PageSize)) {
                    if (!(typeof valLocal === 'undefined' || valLocal == null || $.trim(valLocal) == '' || isNaN(valLocal))) {
                        var valLocalPageSize = parseInt(valLocal);
                        setdgDefaultPageSize(dg_id, valLocalPageSize);
                        return valLocalPageSize;
                    }
                    else
                        return 10;
                } else
                    return parseInt(PageSize);
            } catch (e) {
                console.log('getdgDefaultPageSize', e);
                return 10;
            }
        }
        //设置datagrid默认 列宽及顺序
        function setdg_FieldNoWidth(dg_id, obj) {
            try {
                //obj=>{field:Id,width:100}
                var StrObj = JSON.stringify(obj);//要设置的值
                var cookieKey = dg_id + "_FieldNoWidth";
                var Curr_obj = $.cookie(cookieKey);//当前值
                if (ObjectIsEmpty(Curr_obj)) {
                    $.cookie(cookieKey, StrObj);
                    localStorage.setItem(cookieKey, StrObj);
                } else {
                    var objStr = JSON.stringify(Curr_obj);//当前值
                    if (objStr != StrObj) {
                        $.cookie(cookieKey, StrObj);
                        localStorage.setItem(cookieKey, StrObj);
                    }
                }
            } catch (e) {
                console.log('setdgDefaultPageSize', e);
            }
            return true;
        }
        //获取datagrid默认 列宽及顺序
        function getdg_FieldNoWidth(dg_id) {
            try {
                //obj=>{field:Id,width:100}
                var cookieKey = dg_id + "_FieldNoWidth";
                var Curr_obj = $.cookie(cookieKey);//当前值
                var valLocal = localStorage.getItem(cookieKey); // 读取存储变量名为key的值
                if (ObjectIsEmpty(Curr_obj)) {
                    if (!ObjectIsEmpty(valLocal)) {
                        var valLocalobj = JSON.parse(valLocal);
                        $.cookie(cookieKey, valLocal);
                        return valLocalobj;
                    }
                    else
                        return null;
                } else
                    return JSON.parse(Curr_obj);
            } catch (e) {
                console.log('getdgDefaultPageSize', e);
                return null;
            }
        }
        //获取URL参数
        function getQueryString(name) {
            //也可以使用$.url(name)
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
            var r = window.location.search.substr(1).match(reg);
            if (r != null) return unescape(r[2]); return null;
        }
        //$.cookie('the_cookie', 'the_value', {expires: 7, path: '/', domain: 'jquery.com', secure: true});//set
        //$.cookie('the_cookie');//get
        //----------------写在 moment-with-local.js------------------
        //判断是否试数组
        //function ObjectIsArray(obj)
        //将表单转换成Json
        //function getFormSerializeJson(fromid)
        //替换Json特殊字符
        //function ReplaceJson(theString)
        //判断是都是数组
        //function isArrayObj(obj)
        //判断是否是Json 对象
        //function isJsonObj(obj)
    </script>
</head>
<body>
    <!-- Wrapper-->
    <!-- PageClass give you ability to specify custom style for specific view based on action -->
    <div id="wrapper" class="@Html.PageClass()">
        <!-- Navigation -->
        @Html.Partial("_Navigation", WebSiteName)
        <!-- Page wraper -->
        <div id="page-wrapper" class="gray-bg @ViewBag.SpecialClass">
            <!-- Top Navbar -->
            @Html.Partial("_TopNavbar")
            <!-- Main view  -->
            @RenderBody()
            <!-- Footer -->
            @Html.Partial("_Footer")
        </div>
        <!-- End page wrapper-->
        <!-- Right Sidebar -->
        @Html.Partial("_RightSidebar")
    </div>
    <!-- End wrapper-->
    @*<script src="~/Scripts/jquery.global.setting.js"></script>*@
    <!-- Handler for local scripts -->
    @RenderSection("scripts", required: false)
</body>
</html>
@Scripts.Render("~/bundles/bootstrap")
<!--菜单收缩 插件-->
@Scripts.Render("~/plugins/slimScroll")
@Scripts.Render("~/bundles/inspinia")
<script>
    //创建WebSocket Chat
    function CreateSocketIO(IPAddress, LoginData) {
        //登录信息
        var postdata = {
            'name': 'User',   //用户昵称
            'psw': 0//拍卖id
        };
        var show_style = {
            left: '',
            top: '',
            right: '0px',//窗口离右边距离,于left互斥
            bottom: '0px',//窗口离下边距离,于top互斥
            position: 'fixed'//元素定位方式：fixed固定。 默认:absolute绝对定位
        };
        var ShowSetting = {
            timeout: 0,
            showType: 'show',
            width: 300,
            height: 200,
            style: show_style
        };
        var socket = io.connect('ws://' + IPAddress + '', { "transports": ['websocket', 'polling'] });//与服务器进行连接
        socket.on('SendMsgErr', function (msg) {
            ShowSetting.title = '发送消息错误';
            ShowSetting.msg = msg;
            $.messager.show(ShowSetting);
        });
        socket.on('conn', function (data) {
            LoginData.socketId = data.socketId;
            socket.emit('login', LoginData, function (result) {
                console.log('login',result);
            });
        });
        //登录回调函数
        socket.on('loginRet', function (msg) {
            var timeout = 0;
            if (msg == '成功')
                timeout = 3000;
            ShowSetting.title = '登录';
            ShowSetting.msg = msg;
            ShowSetting.timeout = timeout;
            $.messager.show(ShowSetting);
        });
        //接收 消息
        socket.on('msgReceived', function (msg) {
            var timeout = 1 * 60 * 1000;//(1分钟)
            ShowSetting.title = '新消息';
            ShowSetting.msg = msg;
            ShowSetting.timeout = timeout;
            $.messager.show(ShowSetting);
        });
        socket.on('c_leave', function (msg) {
            console.log('c_leave',msg);
        });
    }
    //Ajax 防止重复提交
    function AddAjaxActionGuidName(AjaxObj) {
        try {
            var ActionGuidNameStr = '';
            var ActionGuidStr = '';
            if (!(typeof (ActionGuidName) === 'undefined' || ActionGuidName == null))
                ActionGuidNameStr = ActionGuidName;
            if (!(typeof (ActionGuid) === 'undefined' || ActionGuid == null))
                ActionGuidStr = ActionGuid;
            if (AjaxObj.url.indexOf('?') > 0) {
                AjaxObj.url += "&ActionGuidName=" + ActionGuidNameStr;
            } else
                AjaxObj.url += "?ActionGuidName=" + ActionGuidNameStr;
            AjaxObj.url += "&ActionGuid=" + ActionGuidStr;

            //if (typeof (this.data) === 'undefined' || this.data == null || this.data == '')
            //    this.data += "ActionGuidName=" + ActionGuidNameStr;
            //else
            //    this.data += "&ActionGuidName=" + ActionGuidNameStr;
            //this.data += "&ActionGuid=" + ActionGuidStr;
        } catch (e) {
            console.log('ajaxSetup-beforeSend', '为请求添加表单唯一值:' + e);
        }
    }

    $(function () {
        var $loading = {};
        jQuery.ajaxSetup({
            async: true,//设置全局异步获取数据
            dataFilter: function (data, type) {
                try {
                    var JsonObj = JSON.parse(data);
                    //console.log('dataFilter',JsonObj, data, type);
                    if (!(typeof (JsonObj) === 'undefined' || JsonObj == null)) {
                        if (!(typeof (JsonObj.ActionGuidName) === 'undefined' || JsonObj.ActionGuidName == null)) {
                            ActionGuidName = JsonObj.ActionGuidName;
                            if (ActionGuidName != '') {
                                if (!(typeof (JsonObj.ActionGuid) === 'undefined' || JsonObj.ActionGuid == null)) {
                                    ActionGuid = JsonObj.ActionGuid;
                                }
                            }
                        }
                    }
                    //console.log('dataFilter', ActionGuidName, ActionGuid);
                    return data;
                } catch (e) {
                    console.log('ajaxSetup-dataFilter', '为请求更新表单唯一值:' + e);
                    return data;
                }
            },
            beforeSend: function (xhr) {
                //console.log('beforeSend', this, xhr);
                AddAjaxActionGuidName(this);
                //var opts = {
                //    lines: 13, // The number of lines to draw
                //    length: 11, // The length of each line
                //    width: 5, // The line thickness
                //    radius: 17, // The radius of the inner circle
                //    corners: 1, // Corner roundness (0..1)
                //    rotate: 0, // The rotation offset
                //    color: '#FFF', // #rgb or #rrggbb
                //    speed: 1, // Rounds per second
                //    trail: 60, // Afterglow percentage
                //    shadow: false, // Whether to render a shadow
                //    hwaccel: false, // Whether to use hardware acceleration
                //    className: 'spinner', // The CSS class to assign to the spinner
                //    zIndex: 2e9, // The z-index (defaults to 2000000000)
                //    top: 'auto', // Top position relative to parent in px
                //    left: 'auto' // Left position relative to parent in px
                //};
                //var target = document.createElement("div");
                //document.body.appendChild(target);
                //var spinner = new Spinner(opts).spin(target);
                //$loading = iosOverlay({
                //    text: "Loading",
                //    duration: 1000,
                //    spinner: spinner
                //});
            },
            complete: function (xhr, status) {
                //if ($loading) {
                //    try {
                //        $loading.update({
                //            duration: 200,
                //            icon: "/imgs/check.png",
                //            text: "Success"
                //        });
                //    }
                //    catch (e) {
                //    }
                //}
            },
            timeout: function () {
                //alert('error');
            },
            error: function () {
                //alert('error');
            },
            success: function (result, status, xhr) {
                //alert('success');
            }
        });
    });

    @*@if (!(User == null || User.Identity == null || !User.Identity.IsAuthenticated))
    {
        var objConnNodeJsPusher = CacheHelper.GetCache("ConnNodeJsPusher");
        string ConnNodeJsPusherStr = objConnNodeJsPusher == null ? "" : objConnNodeJsPusher.ToString();
        if (!string.IsNullOrEmpty(ConnNodeJsPusherStr)) {
            @Html.Raw("CreateSocketIO('" + ConnNodeJsPusherStr + "',{name:'" + User.Identity.Name + "'})");
        }
    }*@
</script>