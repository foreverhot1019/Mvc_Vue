@model IEnumerable<TMI.Web.Models.SetDefaults>
@{
    ViewBag.Title = "设置默认值";
}
<div id="app" v-cloak>
    <!--搜索条件-->
    <!--工具条-->
    <el-row style="background-color: #eee; padding:10px 0px 0px 10px">
        <el-col>
            <el-form v-bind:inline="true" v-bind:model="filters.filterRules" size="mini" ref="tb_search">
                <el-form-item v-for="field in ArrSearchField"
                              v-if="!field.IsKey && field.SearchShow"
                              v-bind:label-width="formLabelWidth"
                              v-bind:label="field.DisplayName"
                              v-bind:prop="field.Name"
                              v-bind:rules="el_FormFieldRules(field,true)">
                    <component v-if="!field.IsForeignKey" v-model="filters.filterRules[field.Name]"
                               v-bind:is="el_inputType(field)"
                               v-bind:prop="field.Name"
                               v-bind:type="el_inputProtoType(field,true)"
                               v-bind:precision="field.Precision"
                               value-format="yyyy-MM-dd"
                               range-separator="至"
                               start-placeholder="日期起"
                               end-placeholder="日期讫">
                        <i slot="suffix" class="el-input__icon fa"
                           v-show="field.Name.toLowerCase().indexOf('password')>=0"
                           v-on:click="pswView(field)"
                           v-bind:class="el_inputClass(field)"></i>
                    </component>
                    <el-select v-else v-model="filters.filterRules[field.Name]"
                               filterable remote reserve-keyword clearable
                               v-bind:remote-method="q=>el_remoteMethod(q,field,'search')"
                               v-bind:loading="el_selt.el_selt_loading">
                        <template v-if="el_selt[field.Name+'_search']">
                            <el-option v-for="item in el_selt[field.Name+'_search'].ArrOption"
                                       v-bind:key="item.Value"
                                       v-bind:label="item.Text"
                                       v-bind:value="item.Value">
                                <div class="row">
                                    <div class="col-md-6">{{ item.Value }}</div>
                                    <div class="col-md-6" style="float: right; color: #8492a6; font-size: 13px;">{{ item.Text }}</div>
                                </div>
                            </el-option>
                        </template>
                    </el-select>
                </el-form-item>
                @*<el-form-item style="margin-bottom: 8px;" prop="UserName" label="@Html.DisplayNameFor(model => model.UserName)" v-bind:label-width="formLabelWidth">
                        <el-input v-model="filters.filterRules.UserName" auto-complete="off" placeholder="用户名" v-on:keydown.native="keydown"></el-input>
                    </el-form-item>
                    <el-form-item style="margin-bottom: 8px;" prop="UserNameDesc" label="@Html.DisplayNameFor(model => model.UserNameDesc)" v-bind:label-width="formLabelWidth">
                        <el-input v-model="filters.filterRules.UserNameDesc" auto-complete="off" placeholder="昵称"></el-input>
                    </el-form-item>
                    <el-form-item style="margin-bottom: 8px;" prop="DepartMent" label="@Html.DisplayNameFor(model => model.DepartMent)" v-bind:label-width="formLabelWidth">
                        <el-input v-model="filters.filterRules.DepartMent" auto-complete="off" placeholder="部门"></el-input>
                    </el-form-item>
                    <el-form-item style="margin-bottom: 8px;" prop="Email" label="@Html.DisplayNameFor(model => model.Email)" v-bind:label-width="formLabelWidth">
                        <el-input v-model="filters.filterRules.Email" auto-complete="off" placeholder="邮箱"></el-input>
                    </el-form-item>
                    <el-form-item style="margin-bottom: 8px;" prop="LockoutEndDateUtc" label="@Html.DisplayNameFor(model => model.LockoutEndDateUtc)" v-bind:label-width="formLabelWidth">
                        <el-date-picker v-model="filters.filterRules.LockoutEndDateUtc"
                                        value-format="yyyy-MM-dd"
                                        type="daterange"
                                        range-separator="至"
                                        start-placeholder="日期起"
                                        end-placeholder="日期讫">
                        </el-date-picker>
                    </el-form-item>
                    <el-form-item style="margin-bottom: 8px;" prop="LockoutEnabled" v-bind:label-width="formLabelWidth">
                        <el-checkbox v-model="filters.filterRules.LockoutEnabled" auto-complete="off" label="@Html.DisplayNameFor(model => model.LockoutEnabled)" border></el-checkbox>
                    </el-form-item>*@
                <br>
                <el-form-item style="margin-bottom: 8px;">
                    <el-button type="primary" icon="el-icon-search" v-on:click="search" v-bind:loading="tbLoading">查询</el-button>
                </el-form-item>
                <el-form-item style="margin-bottom: 8px;">
                    <el-button icon="el-icon-refresh" v-on:click="resetFilter('tb_search')" v-bind:disabled="tbLoading">重置</el-button>
                </el-form-item>
            </el-form>
        </el-col>
    </el-row>
    <!--按钮组-->
    <el-row style="padding: 3px 10px 3px 10px;">
        <el-col>
            <el-button-group>
                <el-button type="primary" icon="el-icon-plus" size="small" v-bind:disabled="!UserRoles.Create" v-on:click="handleAddRow">新增</el-button>
                <el-button icon="el-icon-download" size="small" v-bind:disabled="!UserRoles.Export" v-on:click="ExportXls(tableData,'帐户')">导出</el-button>
                <el-button icon="el-icon-upload" size="small" v-bind:disabled="!UserRoles.Import" v-on:click="ImportXls">导入</el-button>
            </el-button-group>
        </el-col>
    </el-row>
    <el-row>
        <el-col>
            <el-table ref="Mytb" size="mini" style="width: 100%" max-height="500" row-key="Id" border stripe
                      v-bind:default-sort="{prop:'Id',order:'descending'}"
                      v-bind:data="tableData"
                      v-loading="tbLoading"
                      v-on:row-dblclick="handledblclick"
                      v-on:selection-change="handleSelectionChange"
                      v-on:sort-change="tbSortChange">
                <el-table-column fixed type="selection" width="36"></el-table-column>
                <template>
                    <el-table-column show-overflow-tooltip
                                     v-for="(field,index) in ArrField"
                                     v-if="!field.IsKey && field.ListShow"
                                     v-bind:width="field.Width_List"
                                     v-bind:sortable="field.Sortable?'custom':false"
                                     v-bind:prop="field.Name"
                                     v-bind:label="field.DisplayName"
                                     v-bind:formatter="formatter(field)">
                    </el-table-column>
                </template>
                <el-table-column fixed="right" label="操作" width="47" v-if="UserRoles.Delete">
                    <template slot-scope="sp">
                        @*<el-tooltip content="查看" placement="top" effect="light">
                                <el-button type="primary" size="mini" icon="el-icon-view" circle v-on:click="handleViewClick(scope.row)"></el-button>
                            </el-tooltip>*@
                        <el-tooltip content="删除" placement="top" effect="light">
                            <el-button type="danger" size="mini" icon="el-icon-delete" circle v-bind:disabled="!UserRoles.Delete" v-on:click.native.prevent="deleteRow(sp.$index, sp.row)"></el-button>
                        </el-tooltip>
                    </template>
                </el-table-column>
            </el-table>
            <!--工具条-->
            <el-row style="padding-top: 10px;">
                <el-col v-bind:span="8">
                    <el-button type="danger" size="small" v-on:click="handledelSeltRow" v-bind:disabled="(UserRoles.Delete ? selctRows.length===0 : true)">批量删除</el-button>
                </el-col>
                <el-col v-bind:span="16">
                    <el-pagination v-model="pagiNation" style="float:right;"
                                   v-on:size-change="pageSizeChange"
                                   v-on:current-change="pageCurrentChange"
                                   v-on:prev-click="PrevPage"
                                   v-on:next-click="NextPage"
                                   v-bind:current-page="pagiNation.currentPage"
                                   v-bind:page-sizes="pagiNation.pageSizes"
                                   v-bind:page-size="pagiNation.pageSize"
                                   v-bind:layout="pagiNation.layout"
                                   v-bind:total="pagiNation.total">
                    </el-pagination>
                </el-col>
            </el-row>
        </el-col>
    </el-row>
    <!--弹出框-->
    <el-dialog v-bind:title="dgTitle" ref="MyDialog" width="60%" center v-dialogdrag @*:fullscreen="true" rules="rules" *@
               v-bind:visible.sync="centerDialogVisible"
               v-loading="dlgLoading"
               v-on:close="dlgClose">
        <el-form ref="MyForm" v-bind:model="curr_rowdata" label-position="right" inline size="small">
            <el-form-item v-for="field in ArrFormField"
                          v-if="!field.IsKey || field.FormShow"
                          v-bind:label-width="formLabelWidth"
                          v-bind:label="field.DisplayName"
                          v-bind:prop="field.Name"
                          v-bind:rules="el_FormFieldRules(field)">
                <component v-if="!field.IsForeignKey" v-bind:is="el_inputType(field)"
                           v-bind:disabled="field.IsKey || (!field.Editable&&curr_rowdata.Id>0)"
                           v-model="curr_rowdata[field.Name]"
                           v-bind:prop="field.Name"
                           v-bind:type="el_inputProtoType(field)"
                           v-bind:precision="field.Precision">
                    <i slot="suffix" class="el-input__icon fa"
                       v-show="field.Name.toLowerCase().indexOf('password')>=0"
                       v-on:click="pswView(field)"
                       v-bind:class="el_inputClass(field)"></i>
                </component>
                <el-select v-else v-model="curr_rowdata[field.Name]"
                           filterable remote reserve-keyword clearable
                           v-bind:remote-method="q=>el_remoteMethod(q,field,'form')"
                           v-bind:loading="el_selt.el_selt_loading">
                    <template v-if="el_selt[field.Name+'_form']">
                        <el-option v-for="item in el_selt[field.Name+'_form'].ArrOption"
                                   v-bind:key="item.Value"
                                   v-bind:label="item.Text"
                                   v-bind:value="item.Value">
                            <div class="row">
                                <div class="col-md-6">{{ item.Value }}</div>
                                <div class="col-md-6" style="float: right; color: #8492a6; font-size: 13px;">{{ item.Text }}</div>
                            </div>
                        </el-option>
                    </template>
                </el-select>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="centerDialogVisible = false">取 消</el-button>
            <el-button type="primary" v-bind:disabled="!UserRoles.Edit" v-on:click="dlgSubmit">确 定</el-button>
        </span>
    </el-dialog>
</div>

@section Scripts {
    <!--
        import是异步加载的，<script>-type 必须是modual
        import commonFiltes from "/Scripts/Vue/VueFilters.js

        已通过requireJs 异步加载 Vue-ElementUI+Vue自定义扩展

        dialogDrag:el-dialog拖动全屏扩展
        formatter:字段格式化Vue.$formmatter
        validtors:el-input 自定义验证Vue.$Validtors
        VueFilters:vue全局filter v-bind:id="rawId | formatId" |前面字段后面过滤器 注：v-bind有效，v-Model 无效
    -->
    <script type="text/javascript">
    const Edit = @Html.IsAuthorize("Edit").ToString().ToLower(),//编辑权限
        Create = @Html.IsAuthorize("Create").ToString().ToLower(), //新增权限
        Delete = @Html.IsAuthorize("Delete").ToString().ToLower(),//删除权限
        Import = @Html.IsAuthorize("Import").ToString().ToLower(),//导入权限
        Export = @Html.IsAuthorize("Export").ToString().ToLower();//导出权限
        //自定义列数据
        var CustomerFields = {
            "TableName":{
                DisplayName: "表名",//显示名称
                Editable: true,//可编辑
                ForeignKeyGetListUrl: '/SetDefaultses/getXMLDefaultTablesData?q=combogrid',//获取外键数据Url
                FormOrder: 0,//Form排序
                FormShow: true,//Form中展示
                IsForeignKey: true,//外键
                IsKey: false,//主键
                ListOrder: 0,//列表排序
                ListShow: true,//列表展示
                MaxLength: 0,//最大长度
                MinLength: 0,//最小长度
                Name: "TableName",//名称
                Precision: null,//Type为number时，可设置小数位
                Required: true,//必填
                SearchOrder: 0,//搜索排序
                SearchShow: true,//搜索中展示
                Sortable: true,//是否可排序
                Type: "string",//"datetime/number/string/boolean";//类型
                Width_List: "100",//列表-列宽度 <=0 默认*，>0 此宽度为准
                Width_input: "168",//Form-input宽度 <=0 默认*，>0 此宽度为准
                inputType: "text",//"password/datetime/text";//form中的input类型
            }
        };
        var BaseArrField = @Html.Raw(Html.RenderVue_ModelJson());
        //设置自定义列
        Object.keys(CustomerFields).forEach(function(item,index){
            let OField= BaseArrField.ArrField.filter(function(val){
                return val.Name == item;
            });
            if(OField.length>0){
                OField = OField[0];
                let CusField = CustomerFields[item];
                Object.assign(OField,CusField);
            }
        });
        if(BaseArrField.IsListOrder){
            var ArrField = BaseArrField.ArrField.sort(function(a,b){
                if(a.ListOrder==b.ListOrder)
                    return a.Name-b.Name;
                else
                    return a.ListOrder-b.ListOrder;
            });
        }else
            var ArrField =BaseArrField.ArrField;
        if(BaseArrField.IsSearchOrder){
            var ArrSearchField = BaseArrField.ArrField.sort(function(a,b){
                if(a.SearchOrder==b.SearchOrder)
                    return a.Name-b.Name;
                else
                    return b.SearchOrder-a.SearchOrder;
            });
        }else
            var ArrSearchField =BaseArrField.ArrField;
        if(BaseArrField.IsFormOrder){
            var ArrFormField = BaseArrField.ArrField.sort(function(a,b){
                if(a.FormOrder==b.FormOrder)
                    return a.Name-b.Name;
                else
                    return b.FormOrder-a.FormOrder;
            });
        }else
            var ArrFormField =BaseArrField.ArrField;
        /*
        自定义列数据 table-searchForm-editForm 通过此配置渲染；说明：
        Name //名称
        DisplayName //显示名称
        Sortable //是否可排序
        Width_List //列表-列宽度 <=0 默认*，>0 此宽度为准
        Width_input //Form-input宽度 <=0 默认*，>0 此宽度为准
        Type  "datetime/number/string/boolean";//类型
        Precision //Type为number时，可设置小数位
        inputType  "password/datetime/text";//form中的input类型
        Required //必填
        IsKey //主键
        Editable //可编辑
        MaxLength //最大长度
        MinLength //最小长度
        SearchShow //搜索中展示
        FormShow //Form中展示
        ListShow //列表展示
        ListOrder //列表排序
        SearchOrder //搜索排序
        FormOrder //Form排序
        IsForeignKey //外键
        ForeignKeyGetListUrl //获取外键数据Url
        */

        //requireJs 按需加载 js
        require(['vue', '_vue_resource','ELEMENT','IndexBaseMixin'],function(Vue,Vue_Resource,ELEMENT,myMixin){
            Vue.use(ELEMENT);
            Vue.use(Vue_Resource);
            var vue_tb = new Vue({
                el: '#app',
                directives:{},// 注册局部指令
                mixins: [myMixin],//混入相当于extend
                data:function(){//混入的data 会与此data 合并，相同名字会被此data覆盖
                    return {
                        tbUrl: {
                            controller: '/SetDefaultses/',
                            getdata: 'PageList',//获取数据 action
                            batchSave: 'SaveData',//批量操作 action
                            exportExcel: 'ExportExcel',//导出Excel action
                            importExcel: '/FileUpload/Upload?modelType=Messages',//导入Excel action
                        },
                    }
                },
                methods:{
                    //自定义方法会覆盖 混入的 methods
                    dlgSubmit:function(e){
                        var thisVue = this;
                        this.$refs['MyForm'].validate(function(valid){
                            if (valid) {
                                thisVue.dlgLoading = true;//弹出框加载中
                                var url = thisVue.tbUrl.controller + thisVue.tbUrl.batchSave;//批量保存url
                                var batchSaveData = {//批量操作数据
                                    inserted: [],
                                    deleted: [],
                                    updated: []
                                };
                                if (thisVue.curr_rowdata.Id == 0) {
                                    url = thisVue.tbUrl.controller + 'Create';
                                } else {
                                    url = thisVue.tbUrl.controller + 'Edit';
                                }
                                batchSaveData =thisVue.curr_rowdata;
                                //提交数据
                                thisVue.$http.post(url,batchSaveData, {
                                    headers: {//指示为 ajax请求
                                        "X-Requested-With": "XMLHttpRequest"
                                    }
                                }).then(function (success){//成功
                                    thisVue.dlgLoading = false;//弹出框加载完毕
                                    try {
                                        var retData = success.body;
                                        if (retData.Success) {
                                            thisVue.centerDialogVisible = false;//显示/关闭弹出框
                                            if (thisVue.curr_rowdata.Id == 0){
                                                if(thisVue.pagiNation.currentPage==1)
                                                    thisVue.tb_GetData();
                                                else
                                                    thisVue.pageCurrentChange(1);//新增数据时，重新获取数据
                                            }
                                            else
                                                $.extend(thisVue.curr_rowdata_Original, thisVue.curr_rowdata);
                                        }else{
                                            thisVue.$message({
                                                duration:0,//不自动关闭
                                                showClose: true,
                                                message: '错误:' + retData.ErrMsg,
                                                type: 'error'
                                            });
                                        }
                                    } catch (e) {
                                        thisVue.$message({
                                            duration:0,//不自动关闭
                                            showClose: true,
                                            message: '提交数据处理，出现错误',
                                            type: 'error'
                                        });
                                    }
                                }, function (error){//错误
                                    thisVue.dlgLoading = false;//弹出框加载完毕
                                    thisVue.$message({
                                        duration:0,//不自动关闭
                                        showClose: true,
                                        message: '提交数据出现错误',
                                        type: 'error'
                                    });
                                });
                            } else {
                                console.log('error submit!!');
                                return false;
                            }
                        });
                    },//弹出框提交数据
                },
            });
        });
    </script>
}