@model IEnumerable<AirOut.Web.Models.Saller>
@{
    ViewBag.Title = "销售列表";
    var Num = 1;
    var ArrStatus = AirOut.Web.Extensions.Common.GetEnumToDic("UseStatusEnum", "AirOut.Web.Models.AirOutEnumType").Select(n => new { ID = n.Value.ToString(), TEXT = n.DisplayName, Value = n.Value, DisplayName = n.DisplayName });
    var ArrUseStatus = AirOut.Web.Extensions.Common.GetEnumToDic("UseStatusIsOrNoEnum", "AirOut.Web.Models.AirOutEnumType").Select(n => new { ID = n.Value.ToString(), TEXT = n.DisplayName, Value = n.Value, DisplayName = n.DisplayName });
}
<!--DataGrid 回车Editor下一个 和 为控件添加 Key事件 -->
<script src="~/Scripts/jsext.js?date=2019031401"></script>
<!--真实 下载进度条 -->
<script async defer src="~/Scripts/DownLoadProgress.js"></script>
<script type="text/javascript">
    //表单唯一值，防止重复提交
    var ActionGuidName = '@(ViewData["ActionGuidName"]??"")';
    var ActionGuid = '@(ViewData["ActionGuidName"] == null ? "" : (ViewData[ViewData["ActionGuidName"].ToString()] ?? ""))';
    //异步获取 选择框
    var ArrIsLoadWin = {
        //IsLoadArApEdit_PopupWin: false
    };
    //AsyncGetMyWin(url,IsLoadMyWin,InitMyWinFucName,Async_Load)整合在jsext
</script>

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>@ViewBag.Title</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Home")">主页</a>
            </li>
            <li>
                <a href="#">基础资料</a>
            </li>
            <li class="active">
                <strong>@ViewBag.Title</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">

    </div>
</div>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    <form id="searchform" method="post" style="padding-bottom:10px; width:auto">
                        <div id="div_search" style="padding-top:5px; padding-bottom:3px; width:auto;" class="easyui-panel" title="查询条件"
                             data-options="collapsible:true">
                            <div class="form-group col-md-3">
                                <label for="Name_Q">姓名:</label>
                                <input id="Name_Q" name="Name_Q" tabindex="@(Num++)" data-options="prompt1:'姓名'" style="width:100%" class="easyui-textbox" type="text" />
                            </div>
                            <div class="form-group col-md-3">
                                <label for="Code_Q">代码:</label>
                                <input id="Code_Q" name="Code_Q" tabindex="@(Num++)" data-options="prompt1:'代码'" style="width:100%" class="easyui-textbox" type="text" />
                            </div>
                            <div class="form-group col-md-3">
                                <label for="Status_Q">状态:</label>
                                <input id="Status_Q" name="Status_Q" tabindex="@(Num++)" data-options="prompt1:'状态'" style="width:100%;" value="" class="easyui-combogrid" type="text" />
                            </div>
                                <div class="form-group col-md-3">
                                    <label for="_ADDTS_Q">创建日期起:</label>
                                    <input id="_ADDTS_Q" name="_ADDTS_Q" tabindex="@(Num++)" data-options="prompt1:'创建日期起'" style="width:100%" class="easyui-datebox" type="text" />
                                </div>
                                <div class="form-group col-md-3">
                                    <label for="ADDTS__Q">创建日期讫:</label>
                                    <input id="ADDTS__Q" name="ADDTS__Q" tabindex="@(Num++)" data-options="prompt1:'创建日期讫'" style="width:100%" class="easyui-datebox" type="text" />
                                </div>
                            <div class="row col-md-12" style="text-align:center;">
                                <button id="btn-search" class="btn btn-primary">
                                    <i class="fa fa-search"></i>
                                    搜索
                                </button>
                                <button id="btn-reset" class="btn btn-default">
                                    <i class="fa fa-reset"></i>
                                    重置
                                </button>
                            </div>
                        </div>
                    </form>
                    <div class="table-responsive">
                        @Html.Partial("ListView", Model)
                        <div id="sallers_toolbar" style="height:auto">
                            @if (Html.IsAuthorize("Create"))
                            {
                                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-plus',plain:true" onclick="append.call(this)">新增</a>
                            }
                            @if (Html.IsAuthorize("Delete"))
                            {
                                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="removeit.call(this)">删除</a>
                            }
                            @if (Html.IsAuthorize("Edit"))
                            {
                                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept.call(this)">保存</a>
                            }
                            <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-refresh',plain:true" onclick="reload.call(this)">刷新</a>
                            <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="reject.call(this)">取消</a>
                            @if (Html.IsAuthorize("Import"))
                            {
                                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-paperclip',plain:true" onclick="importexcel.call(this)">EXCEL 导入</a>
                                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-download-alt',plain:true" onclick="exportexcel.call(this)">导出 Excel</a>
                            }
                        </div>
                    </div>
                    <!-- end ibox-content -->
                </div>
            </div>
        </div>
    </div>
</div>
<div id="importwindow" class="easyui-window" title="Excel 导入" data-options="modal:true,collapsible:false,minimizable:false,maximizable:false,closed:true,iconCls:'icon-paperclip'" style="width:500px;height:260px;padding:10px;">
    <p><input type="file" name="file_upload" id="file_upload" /></p>
</div>
<!--用于后端 加载dom并且渲染成EasyUI样式-->
<div id="EasyUIDom" style="height:35px; clear:both; border:0 solid;"></div>

@section Scripts {
    <script type="text/javascript">
        const ArrStatus = @Html.Raw(ArrStatus == null ? "[]" : Newtonsoft.Json.JsonConvert.SerializeObject(ArrStatus));//数据状态
        const ArrUseStatus = @Html.Raw(ArrUseStatus == null ? "[]" : Newtonsoft.Json.JsonConvert.SerializeObject(ArrUseStatus));//数据bool状态
        const Editable = '@Html.IsAuthorize("Finances"), "Index", "Edit")';//编辑权限
        const Curr$dgCtrl = 'sallers'; //当前dg是应收/应付账单 id前缀
        var editIndex = undefined;
        var $dg = $('#sallers_datagrid');

        $(function ()
        {
            $("#file_upload").uploadifive({
                'height': 30,
                'fileTypeDesc': 'Excel 2010 Files',
                'fileTypeExts': '*.xlsx',
                'uploadScript': '/FileUpload/Upload',
                'buttonText': '选择EXCEL',
                'multi': true,
                'displayData': 'speed',
                'formData': { 'modelType': 'Saller' },
                'width': 120,
                'successTimeout': 100000,
                'onFallback': function ()
                {
                    $.messager.alert('导入错误', '导入错误，请重试！<br>', 'error');
                    $('#file_upload').uploadifive('clearQueue')
                },
                'onSelect': function (queue)
                {
                    $.messager.progress({
                        title: '执行导入',
                        msg: '请等待...'
                    });
                },
                'onUploadComplete': function (file, data)
                {
                    $.messager.progress('close');
                    var data = $.parseJSON(data);
                    //console.log(data);
                    if (data.success == false) {
                        $.messager.alert('导入错误', '导入错误，请修改后再倒入！<br>' + data.message, 'error');
                        $("#file_upload").uploadifive('clearQueue')
                    } else {
                        $.messager.alert('导入完成', '导入完成！<br>', 'info');
                        $dg.datagrid('reload');
                        $('#importwindow').window('close');
                    }
                    return true;
                    //alert('The file ' + file.name + ' was successfully uploaded with a response of ' + response + ':' + data);
                }
            });
            InitPageCombogrid("_FromCache");
            var FromData = "{}";
            var FormNAMEData = @Html.Raw(ViewData["FormNAME"] ?? "{}");
            FormNAMEData = $.extend(FromData,FormNAMEData);
            //设置ComboGrid真实url(为了不页面进入后 不立即加载数据，优化页面载入速度)
            //表单名称，虚拟url名称，是否刷新数据，ComboGrid-Text值
            resetCombogridUrl('div_search', null, false, {});
        });

        //combogrig 初始化
        function InitPageCombogrid(_FromCache){
            var FromCache=""
            if(!(typeof(_FromCache) ==='undefined'||_FromCache ==null||_FromCache==''))
                FromCache = "_FromCache";
            //代操作
            $("#Status_Q").combogrid($.extend({}, combogrid_DefaultSettings, {
                mode: 'loacl',
                pagination: false,
                data:ArrStatus
            }));
            //function Charge_CodeSleted(Selted){
            //    if (Selted) {
            //        var NameVal = Selted["TEXT"];
            //        if (!(typeof NameVal === 'undefined' || NameVal == null)) {
            //            $("#Charge_Desc_Q").textbox('setValue',NameVal);
            //        }else {
            //            NameVal = Selted[$(this).combogrid('options').textField];
            //            if (!(typeof NameVal === 'undefined' || NameVal == null))
            //                $("#Charge_Desc_Q").textbox('setValue',NameVal);
            //        }
            //    }
            //}
            ////费用代码
            //var $Charge_Code = $('#Charge_Code_Q');
            //if($Charge_Code.length>0){
            //    $Charge_Code.combogrid($.extend({},combogrid_DefaultSettings,{
            //        textField:"ID",
            //        url1: '/FeeTypes/GetPagerFeeTypes'+FromCache,
            //        onChange: function () {
            //            var Selted = $(this).combogrid('grid').datagrid('getSelected');
            //            Charge_CodeSleted(Selted);
            //        }
            //    }));
            //    //费用代码 keyup事件 小写转大写
            //    $Charge_Code.combogrid("textbox").bind('keyup',function(event){
            //        var keyCode = event.which || event.keycode;
            //        //console.log(keyCode);
            //        if(keyCode!=229)
            //            this.value = this.value.toUpperCase();
            //    });
            //}
        }
        //导入
        function importexcel()
        {
            //获取datagrid
            if (!getCurrent$dg(this))
                return false;
            $('#importwindow').window('open');
        }
        //导出
        function exportexcel()
        {
            //获取datagrid
            if (!getCurrent$dg(this))
                return false;
            var opts = $dg.datagrid('options');

            var formData = { filterRules: opts.queryParams.filterRules, sort: opts.sortName, order: opts.sortOrder };
            var url = '/Sallers/ExportExcel';
            $.DownLoadProgress({
                url: url,         //下载文件的url
                method: 'Post',   //链接打开方式
                data: formData,         //要发送的数据
                downLoadInfo: '下载文件', //下载界面文字
                closeDelay: 2000, //自动关闭时间(毫秒) 0则立马关闭
                callbackFuc: function ()
                {
                    $.messager.progress('close');
                }
            });
        }
        //查询条件重置按钮 点击事件
        $("#btn-reset").click(function (e) {
            e.preventDefault();
            clearfrom();
        });
        //点击重置按钮时，触发，清空查询条件
        function clearfrom() {
            $('#searchform').form('clear');
        }
        //点击搜索按钮时，触发
        $("#btn-search").click(function (e) {
            e.preventDefault();
            searchf();
            $dg.datagrid("clearChecked");
            $dg.datagrid("clearSelections");
        });
        //设置dg搜索条件，并搜索
        function searchf() {
            var opts = $dg.datagrid('options');
            var params = setfilteropts();//设置查询条件
            opts.queryParams = {
                'filterRules': JSON.stringify(params)
            };
            opts.pageNumber = 1;
            var pager = $dg.datagrid('getPager');
            pager.pagination('refresh', {
                pageNumber: 1
            });
            $dg.datagrid('reload');
        }
        //查询条件拼接
        function setfilteropts() {
            var params = [];
            var searchData = getFormSerializeJson("#searchform");
            for(var i in searchData){
                var data = searchData[i];
                if (!(typeof (data) === 'undefined' || data == null || data == "")) {
                    params.push({ "field": i.replace('_Q',''), "op": "equal", "value": data });
                }
            }
            return params;
        }
        //datagrid  键盘事件(写在 jsext/EasyUIDataGrid_ControlNext 文件中)
        //var dg_keyHandler = dg_keyHandler;
        //datagrid 编辑时的 combogrid通用参数设置
        var dg_combo_coSettings = combogrid_DefaultSettings;
        //datagrid 编辑时的 combogrid参数设置
        var Arrcombogrid_Settings = {};
        Arrcombogrid_Settings = function setInitCombogridSettings(){
            var _Arrcombogrid_Settings ={};
            _Arrcombogrid_Settings[Curr$dgCtrl + '_datagrid'] = {
                //'COUNTRY': $.extend({}, dg_combo_coSettings, {
                //    required: true,
                //    url: '/PARA_COUNTRYS/GetPagerPARA_COUNTRY',
                //    idField: 'COUNTRY_CO',
                //    valueField: 'COUNTRY_CO',
                //    textField: 'COUNTRY_NA',
                //    columns: [[
                //        { field: 'COUNTRY_CO', title: '代码', width: 53 },
                //        { field: 'COUNTRY_NA', title: '名称', width: 150 }
                //    ]],
                //    onChange: function (value) {
                //        var targetEditor = $dg.datagrid('getEditor', {
                //            field: 'COUNTRY',
                //            index: editIndex
                //        });
                //        if (targetEditor != null) {
                //            var Selted = $(targetEditor.target).combogrid('grid').datagrid('getSelected');
                //            if (Selted) {
                //                var datarow = $dg.datagrid('getData').rows[editIndex];
                //                if (!(typeof datarow === 'undefined' || datarow == null)) {
                //                    datarow['COUNTRY' + 'NAME'] = Selted[$(targetEditor.target).combogrid('options').textField];
                //                }
                //            }
                //        }
                //    }
                //}),
                'Status':$.extend({}, dg_combo_coSettings, {
                    required: true,
                    mode:'local',
                    pagination: false,
                    data:ArrStatus
                }),
            };
            //bool状态
            var ArrboolCol = [
                /*应收/应付*/
                "Create_Status",//产生标志
            ];
            //设置combogrid-bool状态
            for(var i in _Arrcombogrid_Settings){
                for(var ii in ArrboolCol){
                    _Arrcombogrid_Settings[i][ArrboolCol[ii]] = $.extend({}, dg_combo_coSettings, {
                        required: true,
                        mode:'local',
                        pagination: false,
                        data:ArrUseStatus
                    });
                }
            }
            return _Arrcombogrid_Settings;
        }();
        //获取当前操作dg
        function getCurrent$dg(obj) {
            let type = typeof (obj);
            if (!(type === 'undefined' || obj === window || obj == null)) {
                let _$dg = $(obj).parent().siblings(".datagrid-view").children("table.easyui-datagrid");
                if (typeof (_$dg) === 'undefined' || _$dg == null || _$dg.length <= 0) {
                    if (typeof (editIndex) === 'undefined' || editIndex == null || editIndex < 0) {
                        $.messager.alert('提示', '无法找到datagrid或没有正在编辑的(' + editIndex + ')行！');
                        return false;
                    }
                } else
                    $dg = _$dg;
                return true;
            } else {
                $.messager.alert('提示', '无法找到datagrid！');
                return false;
            }
        }
        //开始编辑行时，赋值 联动数据
        function onBeginEdit(rowIndex, rowData)
        {
            var num = 0;
            var regx = /^\/Date\([0-9]+(\)\/)$/g;
            for (var i in rowData) {
                if (regx.test(rowData[i])) {
                    rowData[i] = datetimeformatter(rowData[i]);
                }
                var targetEditor = $dg.datagrid('getEditor', {
                    field: i,
                    index: rowIndex
                });
                //console.log("targetEditor", i, targetEditor);
                if (targetEditor) {
                    num++;
                    if (num == 1 && $(targetEditor.target).val() == '') {
                        $(targetEditor.target).parent().children("span:eq(0)").children("input:eq(0)").focus();
                    }

                    var OldVal = targetEditor.oldHtml;
                    switch (targetEditor.type.toLowerCase()) {
                        case "combogrid":
                            //console.log(targetEditor);
                            let combogrid_Setting = Arrcombogrid_Settings[$(this).attr('id')][targetEditor.field];
                            if (combogrid_Setting) {
                                //设置 combogrid 参数（回车下一个等）利用JS闭包原理，让js不回收变量
                                var fnGetcmgrid_Setting = function (_combogrid_Setting,field, _rowIndex) {
                                    return $.extend(combogrid_Setting, {
                                        onLoadSuccess: function (data) {
                                            ondgLoadSuccess($dg, field, _rowIndex);
                                        }
                                    }, dg_keyHandler);
                                };
                                $(targetEditor.target).combogrid(fnGetcmgrid_Setting(combogrid_Setting, targetEditor.field, rowIndex));
                                //设置Combogrid 分页控件 简单模式
                                SetCombogridPager(targetEditor.target);
                            }
                            if (!(typeof (OldVal) === 'undefined' || OldVal == null || OldVal == '')) {
                                if (rowData[targetEditor.field]) {
                                    OldVal = rowData[targetEditor.field];
                                }
                                $(targetEditor.target).combogrid('setValue', OldVal);
                                var opts = $(targetEditor.target).combogrid('options');
                                var url = opts.url;
                                //设置查询参数
                                var queryParams = {
                                    page: 1,
                                    rows: opts.pageSize,
                                    q: OldVal
                                };
                                $(targetEditor.target).combogrid('grid').datagrid('load', queryParams);
                            }
                            break;
                        case "combobox":
                            var opts = $(targetEditor.target).combobox({
                                inputEvents: $.extend({}, $.fn.combobox.defaults.inputEvents, {
                                    keydown: function (event) {
                                        combobox_keydown(this, event, $dg, rowIndex);
                                    }
                                })
                            });
                            setTargetVal(targetEditor, OldVal);
                            break;
                        case "textbox":
                        case "numberbox":
                        case "datebox":
                        case "datetimebox":
                            var data = $(targetEditor.target).data();
                            var $txtbox = $(data.textbox).find("input.textbox-text");
                            var $target = $(targetEditor.target);
                            $target.textbox({
                                inputEvents: $.extend({}, $.fn.textbox.defaults.inputEvents, {
                                    keydown: function (event) {
                                        dg_Listtextbox_keydown(this, event, $dg, rowIndex);
                                    }
                                })
                            });
                            setTargetVal(targetEditor, OldVal);
                            break;
                        case "radio":
                        case "checkbox":
                            $(targetEditor.target).keydown(function (e) {
                                chk_rdo_keydown(this, e, $dg, rowIndex);
                            });
                            setTargetVal(targetEditor, OldVal);
                            break;
                    }
                }
            }
        }
        //编辑
        function endEditing()
        {
            if (editIndex == undefined)
                return true;
            if ($dg.datagrid('validateRow', editIndex)) {
                $dg.datagrid('endEdit', editIndex);
                editIndex = undefined;
                return true;
            } else {
                return false;
            }
        }
        //选择行
        function onSelect(index, row) {
            $dg = $(this);
            //console.log(index, row);
        }
        //设置 不需要编辑的字段
        var Arr$dgNoEditorSet={};
        //设置 不需要编辑的字段
        var ColEditorNull = function(){
            return [
                "ADDWHO",
                "ADDTS",
            ];
        }();
        //设置dg列控件不能编辑
        function Set$dgNoEditor(_$dg){
            var IsSet = false;//是否设置过
            var funcSet = function(_ColEditorNull){
                if(!IsSet){
                    for(var i in ColEditorNull){
                        var Column = _$dg.datagrid('getColumnOption', ColEditorNull[i]);
                        if (!(typeof (Column) === 'undefined' || Column == null || Column == '')) {
                            Column.editor = {};
                        }
                    }
                }
            };
            return {
                IsSet:IsSet,
                ColEditorNullColumn:ColEditorNull,
                Set:funcSet
            }
        }
        //双击行
        function onDblClickRow(index, row) {
            $dg = $(this);
        }
        //单击单元格
        function onClickCell(index, field)
        {
            $dg = $(this);
            var _operates = ["ck"]
            if ($.inArray(field, _operates) >= 0) {
                return;
            }
            if (editIndex != index) {
                if (endEditing()) {
                    if (!Editable)
                    {
                        $.messager.alert('提示', '您没有编辑权限！');
                        return false;
                    }
                    //动态设置 编辑样式
                    var O$dgNoEditorSet =Arr$dgNoEditorSet[$dg.attr('id')];
                    if(typeof(O$dgNoEditorSet)==='undefined'||O$dgNoEditorSet==null||O$dgNoEditorSet==''){
                        for(var i in ColEditorNull){
                            var Column = $dg.datagrid('getColumnOption', ColEditorNull[i]);
                            if (!(typeof (Column) === 'undefined' || Column == null || Column == '')) {
                                Column.editor = {};
                            }
                        }
                        Arr$dgNoEditorSet[$dg.attr('id')] = 1;
                    }
                    $dg.datagrid('selectRow', index).datagrid('beginEdit', index);
                    var ed = $dg.datagrid('getEditor', { index: index, field: field });
                    if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                    }
                    editIndex = index;
                } else {
                    $dg.datagrid('selectRow', editIndex);
                }
            }
        }
        //加载成功
        function onLoadSuccess(rowdata) {
            //行号自适应宽度
            $(this).datagrid("fixRownumber");
        }
        //刷新
        function reload()
        {
            //获取datagrid
            if (!getCurrent$dg(this))
                return false;
            reject();//回滚所有变更
            $dg.datagrid('reload');
        }
        //新增
        function append()
        {
            //获取datagrid
            if (!getCurrent$dg(this))
                return false;
            if (endEditing()) {
                var NewRow = {};
                var Columns = $dg.datagrid('getColumnFields');
                for (var column in Columns) {
                    NewRow[Columns[column]] = null;
                }
                //动态设置 编辑样式
                var O$dgNoEditorSet =Arr$dgNoEditorSet[$dg.attr('id')];
                if(typeof(O$dgNoEditorSet)==='undefined'||O$dgNoEditorSet==null||O$dgNoEditorSet==''){
                    for(var i in ColEditorNull){
                        var Column = $dg.datagrid('getColumnOption', ColEditorNull[i]);
                        if (!(typeof (Column) === 'undefined' || Column == null || Column == '')) {
                            Column.editor = {};
                        }
                    }
                    Arr$dgNoEditorSet[$dg.attr('id')] = 1;
                }
                $dg.datagrid('insertRow', { index: 0, row: NewRow });
                editIndex = 0;
                $dg.datagrid('selectRow', editIndex).datagrid('beginEdit', editIndex);
            }
        }
        //删除
        function removeit()
        {
            //获取datagrid
            if (!getCurrent$dg(this))
                return false;
            var Seltdata = $dg.datagrid('getSelections');
            if (!(typeof editIndex === 'undefined' || editIndex == null || isNaN(editIndex))) {
                $dg.datagrid('cancelEdit', editIndex);
                editIndex = undefined;
            }
            for (var i = Seltdata.length; i > 0; i--) {
                var rowindex = $dg.datagrid('getRowIndex', Seltdata[i - 1]);
                //console.log(rowindex);
                $dg.datagrid('deleteRow', rowindex);
            }
        }
        //保存
        function accept()
        {
            if(!(this ===window || typeof ($dg) === 'undefined' || $dg == null || $dg.length <= 0)){
                if(this !==window){
                    //获取datagrid
                    if(!getCurrent$dg(this))
                        return false;
                }
            }
            if (endEditing()) {
                if ($dg.datagrid('getChanges').length) {
                    var inserted = $dg.datagrid('getChanges', "inserted");
                    var deleted = $dg.datagrid('getChanges', "deleted");
                    var updated = $dg.datagrid('getChanges', "updated");
                    var effectRow = new Object();
                    if (inserted.length) {
                        effectRow.inserted = inserted;
                    }
                    if (deleted.length) {
                        effectRow.deleted = deleted;
                    }
                    if (updated.length) {
                        effectRow.updated = updated;
                    }
                    //console.log(JSON.stringify(effectRow));
                    var url = '/Sallers/SaveData';
                    $.ajax({
                        type: 'POST',
                        url: url,//获取数据的函数
                        async: true,//true 异步，false 同步
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(effectRow),//查询条件JSON.stringify()
                        beforeSend: function (xhr){//发送请求前运行的函数
                            $.messager.progress({
                                title: '数据处理中',
                                msg: '数据处理中，请等待...'
                            });
                            //验证重复提交时 请加上 这句
                            AddAjaxActionGuidName(this);
                        },
                        success: function (response){//查询成功,data为返回的数据
                            if (response.Success) {
                                $.messager.alert("提示", "提交成功！");
                                $dg.datagrid('acceptChanges');
                                $dg.datagrid('reload');
                            }
                            else {
                                var ErrMsgStr = '提交错误了！';
                                if (!(typeof (response.ErrMsg) === 'undefined' || response.ErrMsg == null || response.ErrMsg == ''))
                                    ErrMsgStr = response.ErrMsg;
                                $.messager.alert("错误", ErrMsgStr, 'error');
                            }
                        },
                        error: function (){//查询失败
                            $.messager.alert("错误", "提交错误了！", 'error');
                        },
                        complete: function (xhr, status){//请求完成时运行的函数（在请求成功或失败之后均调用，即在 success 和 error 函数之后）。
                            $.messager.progress('close');
                        }
                    });
                }
                //$dg.datagrid('acceptChanges');
            }
        }
        //取消（回滚所有数据变更）
        function reject()
        {
            if(!(this ===window || typeof ($dg) === 'undefined' || $dg == null || $dg.length <= 0)){
                if(this !==window){
                    //获取datagrid(this指向window时,不执行后面语句)
                    if(!getCurrent$dg(this))
                        return false;
                }
                $dg.datagrid('rejectChanges');
            }
            editIndex = undefined;
        }
        //获取 变更
        function getChanges()
        {
            var rows = $dg.datagrid('getChanges');
            alert(rows.length + ' rows are changed!');
        }
        
        //页面加载结束时
        $(function () {
            var opts = $dg.datagrid('options');
            //读取用户 设置的 列宽与顺序（formatter-func方法Json转换后 会丢失）
            var dg_id = $dg.attr('id');
            var ArrFieldNoWidth = getdg_FieldNoWidth(dg_id);//获取 上次设置的 列宽和顺序
            if (!ObjectIsEmpty(ArrFieldNoWidth)) {
                var ArrFormatterCell = opts.columns[0].filter(function (item) {
                    if (!ObjectIsEmpty(item.formatter))
                        return true;
                    else
                        return false;
                });
                $.each(ArrFieldNoWidth, function () {
                    for (var i in ArrFormatterCell) {
                        var item = ArrFormatterCell[i];
                        if (this.field == item.field)
                            this.formatter = item.formatter;
                    }
                });
                //设置 用户上次设置的 列宽和顺序
                opts.columns[0] = ArrFieldNoWidth;
                //初始化datagrid，以便列宽和顺序 生效
                $dg.datagrid();
            }
            //设置列可移动
            $dg.datagrid("columnMoving");
            setfilteropts();
            opts.url = '/Sallers/GetData';
            opts.onClickCell = onClickCell;
            opts.onBeginEdit = onBeginEdit;
            opts.onSelect = onSelect;
            //opts.onDblClickRow = onDblClickRow;
            opts.onLoadSuccess = onLoadSuccess;
            $dg.datagrid('reload');
            ////设置列可移动
            $dg.datagrid("columnMoving");

            ////默认关闭 部分搜索条件（直接隐藏，easyui 控件 宽度会缩小）
            //var $a = $("#div_search").panel('panel').find("div.panel-header div.panel-tool a:first");
            //$a.trigger('click');
        });
        //自动添加 textbox 或 text的值 
        function AutoAddFilterRule($dg_) {
            var ColumnsFields = $dg_.datagrid('getColumnFields');
            $.each(ColumnsFields, function (i, ColumnName) {
                var input = $dg_.datagrid('getFilterComponent', ColumnName);
                if (!(input.data("datebox") || input.data("datetimebox") || input.data("combobox") || input.data("checkbox") || input.data("combotree") || input.data("combogrid") || input.data("numberbox"))) {
                    var rule = $dg_.datagrid('getFilterRule', ColumnName);
                    var value = input.val();
                    if (!(typeof (value) === 'undefined' || value == null || value == '')) {
                        if ((rule && rule.value != value) || !rule) {
                            $dg_.datagrid('addFilterRule', {
                                field: ColumnName,
                                op: 'equal',
                                value: value
                            });
                        }
                    } else {
                        if (rule) {
                            $dg_.datagrid('removeFilterRule', ColumnName);
                        }
                    }
                }
            });
        }
        //自适应页面大小
        function MyNavResize() {
            var opts = $("#navbar-minimalize").NavResize('getOptions');
            opts.Auto = false;
            opts.OnNavResizefunc = function () {
                //$("#edit_div_one").css('width', "100%");
                //$("#edit_div_two").css('width', "100%");
                //$("#OrderInfo").datagrid("resize", { width: "100%" });
                //$("#OrderDetail").datagrid("resize", { width: "100%" });
                //$("#ProductNameMerge").datagrid("resize", { width: "100%" });
                //$("#Order_Head_panel").panel("resize", { width: "100%" });
                //setTimeout(function () {
                //    var paddigLeftRight = { "padding-left": "0px", "margin-left": "0px", "padding-right": "0px", "margin-right": "0px" };
                //    $("#edit_div_one").css(paddigLeftRight);
                //    $("#edit_div_two").css(paddigLeftRight);
                //    $("#OrderInfo").css(paddigLeftRight);
                //    $("#OrderDetail").css(paddigLeftRight);
                //    $("#ProductNameMerge").css(paddigLeftRight);
                //    $("#Order_Head_panel").css(paddigLeftRight);
                //    SetbuttonssWidth();
                //}, 100);
            };
        }
    </script>
}